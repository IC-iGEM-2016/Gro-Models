include gro

//The following programme allows for stochastic modelling of a "financial control model" where 3 banks are all dependent on one another via an auxotrophic system. As one bank crashes at 180 minutes, due to the nature of the auxotrophic control the population dependent on the crashed population also dies and hence the third dies too. The programme is designed to run using the srand(-1) function allowing for a different run dependent on the time the run has started, therefore the programme was run 30 times in parallel. To use the code download the gro programme from https://github.com/klavinslab/gro. We would like to thank Eric Klavins and James Macdonald for their help.            
    
srand (-1);

///////////////////////////////////////////////// Initialisation //////////////////////////////////////////////////

set ( "dt", 0.1 ); // define the time step
set( "population_max" , 100000);

rhl := signal(0.3, 0.5); // signal(diffusion rate, degredation rate)
cin := signal(0.3, 0.5);
lux := signal(0.3, 0.5);
num_cells1 := 3; // number of cells in population 1 in yellow                    // change this to appropriate numbers
num_cells2 := 9; // number of cells in population 2 in green
num_cells3 := 4;
fp := fopen(ARGV[2], "w" );

UNDEC := 0;
POPULATION1 := 1;
POPULATION2 := 2;
POPULATION3 := 3;

C4 := 3;
C6 := 6;
C14 := 4;

///////////////////////////////////////////////////// population 1 - cin  ////////////////////////////////////////////////////////

program cell1() := {

//Initialise

A1 := 1;
A2 := 1;
a := [T1 := 0,
      T2 := 0,
      k := 1];

t1 := 0;

assign := UNDEC;
state := 0;
rfp := 0;

true : {
  t1 := t1 + dt,
}

///// Count total number of cells across population 1 /////
daughter : { num_cells1 := num_cells1 + 1 }
daughter : { C4 := num_cells1 }

///// Assign the newly divided cells to Population 1 /////
assign = UNDEC & just_divided : { assign := POPULATION1}

///// Production of quorum sensing signal and yellow reporter molecule  /////
  true :{                                          //rate? WHAT IS THIS
    emit_signal (cin, 20),                                // emit at molecules per second?
    rfp := 100*(volume)
}

true :{
a.T1 := a.T1 + dt,
a.T2 := a.T2 + dt,
}

a.T2 > 60 & a.T1 > 0.1 :{
    a.k := if get_signal(lux) < 0.1 then 0 else 1 end,
a.T1 := 0,
a.T2 := 59,
}

a.k = 0 :{
    die(),
    num_cells1 := num_cells1 - 1,
}

//message ( 0,  <> tostring(a.k) <>  "\n");

};

///////////////////////////////////////////////////// population 2 - rhl ////////////////////////////////////////////////////////

program cell2() := {

//Initialise
A1 := 1;
A2 := 1;
FtsZ_2 := 0;
a := [T1 := 0,
      T2 := 0,
      k := 1];

t1 := 0;

assign := UNDEC;
state := 0;
cfp := 0;

true : {
  t1 := t1 + dt,
}

///// Count total number of cells across population 1 /////
daughter : { num_cells2 := num_cells2 + 1 }

///// Assign the newly divided cells to Population 1 /////
assign = UNDEC & just_divided : { assign := POPULATION1}

///// Production of quorum sensing signal and yellow reporter molecule  /////
  true :{                                          //rate? WHAT IS THIS
    emit_signal (rhl, 20),                                // emit at molecules per second?
    cfp := 100*(volume)
}

true :{
a.T1 := a.T1 + dt,
a.T2 := a.T2 + dt,
}

a.T2 > 60 & a.T1 > 0.1 :{
    a.k := if get_signal(cin) < 0.1 then 0 else 1 end,
a.T1 := 0,
a.T2 := 59,
}

a.k = 0 :{
    die(),
    num_cells2 := num_cells2 - 1,
}

//message ( 1,  <> tostring(a.k) <>  "\n");

};


///////////////////////////////////////////////////// population 3 - lux  ////////////////////////////////////////////////////////

program cell3() := {

//Initialise
A1 := 1;
A2 := 1;
a := [T1 := 0,
      T2 := 0,
      T3 := 0,
      k := 1 ];

GP04FtsZ := 0;
K1 := 0;
t1 := 0;

assign := UNDEC;
state := 0;
yfp := 0;

true : {
  t1 := t1 + dt,
}

///// Count total number of cells across population 1 /////
daughter : { num_cells3 := num_cells3 + 1 }
daughter : { C14 := num_cells3 }

///// Assign the newly divided cells to Population 1 /////
assign = UNDEC & just_divided : { assign := POPULATION1}

///// Production of quorum sensing signal and yellow reporter molecule  /////
  true :{                                          //rate? WHAT IS THIS
    emit_signal (lux, 20),
    yfp := 100*(volume),                              // emit at molecules per second?
}


true :{
a.T1 := a.T1 + dt,
a.T2 := a.T2 + dt,
a.T3 := a.T3 + dt,
}

a.T2 > 60 & a.T1 > 0.1 :{
    a.k := if get_signal(rhl) < 0.1 then 0 else 1 end,
a.T1 := 0,
a.T2 := 59,
}

a.k = 0 :{
    die(),
    num_cells3 := num_cells3 - 1,
}

a.T3 > 180 :{
    die(),
    num_cells3 := 0,
}

//  message ( 1,  <> tostring(a.k) <>  "\n");

};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


program main() := {

///// Initialize parameters /////
t := 0;
td := 0;
tx := 0;
tm := 0;
n := 0;
s := 0;
ratio := 0;
ratio2 := 0;
ratio3 := 0;
    x := 0;
    y := 0;
    z := 0;
stats := [ num := 0, mean := 0, std := 0, n := 0, tm := 0]; //for data storage

   ///// Execute step with dt /////
  true : {
  t := t + dt,
  td := td + dt,
  tx := tx + dt,
  tm := tm + dt,
  stats.tm := stats.tm + dt,
  }

///// Display Ratio of the 2 populations at the bottom left corner of the window /////
  t > 1 : {
    clear_messages(0),
    x := (num_cells1 + 0.00001)/(num_cells1 + 0.00001),
    y := (num_cells2 + 0.00001)/(num_cells1 + 0.00001),
    z := (num_cells3 + 0.00001)/(num_cells1 + 0.00001),
  //print (num_cells1, "/", num_cells2, "/", num_cells3, "/", ratio , "\n"  ),
  fprint ( fp, num_cells1, "/", num_cells2, "/", num_cells3, "\n"  ),
  }

     //ecoli ( [x := -155, y := -35, theta := 3.14/2], program cell2() );
    ecoli ( [x := 0, y := 0], program cell2() );      //Bank A
    ecoli ( [x := 0, y := 0], program cell2() );
    ecoli ( [x := 0, y := 0], program cell2() );
    ecoli ( [x := 5, y := 0], program cell2() );
    ecoli ( [x := 5, y := 0], program cell2() );

    ecoli ( [x := 0, y := 0], program cell1() );        //Bank B
    ecoli ( [x := 5, y := 0], program cell1() );
    ecoli ( [x := 5, y := 0], program cell1() );

    ecoli ( [x := 0, y := 0], program cell3() );        //Bank C
    ecoli ( [x := 0, y := 0], program cell3() );
    ecoli ( [x := 0, y := 0], program cell3() );


}
